import '../models/user_medical_preferences.dart';
import '../models/user_preferences.dart';
import './medical_preferences_service.dart';
import './supabase_service.dart';

/// Bridge service to synchronize comprehensive medical data with chat preferences
/// Ensures that the extensive medical data collected in UserMedicalPreferences
/// is properly available to the chat system which uses UserPreferences
class MedicalDataBridgeService {
  static final MedicalPreferencesService _medicalService = MedicalPreferencesService();

  /// Converts comprehensive UserMedicalPreferences to simplified UserPreferences format
  /// for chat compatibility while preserving essential medical information
  static UserPreferences convertToUserPreferences(UserMedicalPreferences medical, {String? userId}) {
    // Convert medical preference enum to UserPreferences format
    MedicinePreference medicinePreference;
    switch (medical.medicinePreference) {
      case 'natural':
        medicinePreference = MedicinePreference.natural;
        break;
      case 'conventional':
        medicinePreference = MedicinePreference.conventional;
        break;
      case 'both':
      default:
        medicinePreference = MedicinePreference.both;
        break;
    }

    // Estimate age range from date of birth
    AgeRange? ageRange;
    if (medical.dateOfBirth != null) {
      final now = DateTime.now();
      final age = now.year - medical.dateOfBirth!.year - 
          (now.month < medical.dateOfBirth!.month || 
           (now.month == medical.dateOfBirth!.month && now.day < medical.dateOfBirth!.day) ? 1 : 0);
      
      if (age < 18) {
        ageRange = AgeRange.under18;
      } else if (age < 30) {
        ageRange = AgeRange.range18to30;
      } else if (age < 50) {
        ageRange = AgeRange.range30to50;
      } else if (age < 65) {
        ageRange = AgeRange.range50to65;
      } else {
        ageRange = AgeRange.over65;
      }
    }

    // Convert gender
    Gender? gender;
    if (medical.gender != null) {
      switch (medical.gender!.toLowerCase()) {
        case 'masculino':
        case 'male':
          gender = Gender.male;
          break;
        case 'femenino':
        case 'female':
          gender = Gender.female;
          break;
        case 'no binario':
        case 'nonBinary':
          gender = Gender.nonBinary;
          break;
        default:
          gender = Gender.preferNotToSay;
          break;
      }
    }

    // Combine all allergies into one list
    final allAllergies = <String>[];
    allAllergies.addAll(medical.allergies);
    allAllergies.addAll(medical.medicationAllergies);
    allAllergies.addAll(medical.foodIntolerances);

    // Create comprehensive additional notes with all medical information
    final additionalNotes = _buildAdditionalNotes(medical);

    return UserPreferences(
      id: null, // Will be generated by the system
      userId: userId ?? '',
      allergies: allAllergies,
      medicinePreference: medicinePreference,
      chronicConditions: medical.chronicConditions,
      currentMedications: medical.currentMedications,
      ageRange: ageRange,
      gender: gender,
      additionalNotes: additionalNotes,
      isFirstTime: false,
    );
  }

  /// Builds comprehensive additional notes from medical preferences
  static String _buildAdditionalNotes(UserMedicalPreferences medical) {
    final notes = <String>[];

    // Basic information
    if (medical.weight != null) {
      notes.add('Peso: ${medical.weight}kg');
    }
    if (medical.height != null) {
      notes.add('Altura: ${medical.height}cm');
    }

    // Lifestyle information
    if (medical.smokingStatus != 'never') {
      final smokingMap = {
        'former': 'Ex-fumador',
        'current': 'Fumador actual',
      };
      notes.add('Tabaco: ${smokingMap[medical.smokingStatus] ?? medical.smokingStatus}');
    }

    if (medical.alcoholConsumption != 'never') {
      final alcoholMap = {
        'occasional': 'Consumo ocasional de alcohol',
        'moderate': 'Consumo moderado de alcohol',
        'heavy': 'Consumo alto de alcohol',
      };
      notes.add(alcoholMap[medical.alcoholConsumption] ?? 'Consume alcohol: ${medical.alcoholConsumption}');
    }

    // Exercise frequency
    final exerciseMap = {
      'sedentary': 'Estilo de vida sedentario',
      'light': 'Ejercicio ligero',
      'moderate': 'Ejercicio moderado',
      'active': 'Persona activa',
      'very_active': 'Muy activo físicamente',
    };
    if (medical.exerciseFrequency != 'moderate') {
      notes.add(exerciseMap[medical.exerciseFrequency] ?? 'Ejercicio: ${medical.exerciseFrequency}');
    }

    // Diet
    if (medical.dietType?.isNotEmpty == true) {
      notes.add('Dieta: ${medical.dietType}');
    }

    // Treatment preferences
    if (medical.avoidMedications.isNotEmpty) {
      notes.add('Medicamentos a evitar: ${medical.avoidMedications.join(", ")}');
    }

    if (medical.preferredTreatments.isNotEmpty) {
      notes.add('Tratamientos preferidos: ${medical.preferredTreatments.join(", ")}');
    }

    // Previous surgeries
    if (medical.previousSurgeries.isNotEmpty) {
      notes.add('Cirugías previas: ${medical.previousSurgeries.join(", ")}');
    }

    // Communication preferences
    final communicationMap = {
      'simple': 'Prefiere comunicación simple y directa',
      'detailed': 'Prefiere explicaciones detalladas y técnicas',
      'balanced': 'Prefiere comunicación balanceada',
    };
    if (medical.communicationStyle != 'balanced') {
      notes.add(communicationMap[medical.communicationStyle] ?? 'Estilo de comunicación: ${medical.communicationStyle}');
    }

    // Language preference
    if (medical.languagePreference != 'es') {
      final langMap = {
        'en': 'Prefiere inglés',
        'ca': 'Prefiere catalán',
      };
      notes.add(langMap[medical.languagePreference] ?? 'Idioma: ${medical.languagePreference}');
    }

    // Emergency contact
    if (medical.emergencyContactName?.isNotEmpty == true) {
      notes.add('Contacto de emergencia: ${medical.emergencyContactName} (${medical.emergencyContactPhone ?? 'sin teléfono'})');
    }

    return notes.join('\n');
  }

  /// Synchronizes medical preferences with user preferences for chat compatibility
  /// This ensures that the comprehensive medical data is available to the AI chat
  static Future<void> syncMedicalDataToChat() async {
    try {
      final user = SupabaseService.currentUser;
      if (user == null) return;

      // Get comprehensive medical preferences
      final medicalPrefs = await _medicalService.getUserMedicalPreferences();
      if (medicalPrefs == null) return;

      // Convert to user preferences format
      final userPrefs = convertToUserPreferences(medicalPrefs, userId: user.id);

      // Update user preferences in the database
      await SupabaseService.upsertUserPreferences(userPrefs);
    } catch (e) {
      print('Error syncing medical data to chat: $e');
      // Don't throw error, just log it - this is a background sync
    }
  }

  /// Gets medical preferences and ensures they are synced to chat format
  static Future<UserMedicalPreferences?> getMedicalPreferencesAndSync() async {
    try {
      final medicalPrefs = await _medicalService.getUserMedicalPreferences();
      if (medicalPrefs != null) {
        // Sync to chat format in the background
        syncMedicalDataToChat();
      }
      return medicalPrefs;
    } catch (e) {
      print('Error getting medical preferences: $e');
      return null;
    }
  }

  /// Saves medical preferences and syncs to chat format
  static Future<void> saveMedicalPreferencesAndSync(UserMedicalPreferences preferences) async {
    // Save the comprehensive medical preferences
    await _medicalService.saveMedicalPreferences(preferences);
    
    // Sync to chat format
    await syncMedicalDataToChat();
  }
}