name: Flutter Web Deploy to GitHub Pages

on:
  push:
    branches: [ '*' ]  # Ejecuta en todas las ramas
  pull_request:
    branches: [ main ]
  # Permite ejecutar este workflow manualmente desde la pesta√±a Actions
  workflow_dispatch:

# Configura permisos para GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write # Necesario para cancelar workflows

# Cancela workflows anteriores del mismo tipo cuando hay nuevos commits
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Workflow Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache para Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
          key: flutter-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}-3.35.4
          restore-keys: |
            flutter-${{ runner.os }}-${{ hashFiles('pubspec.yaml') }}-
            flutter-${{ runner.os }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.4'
          channel: 'stable'
          cache: true

      # Cache para dependencias de pub
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ github.workspace }}/.packages
            ${{ github.workspace }}/.flutter-plugins
            ${{ github.workspace }}/.flutter-plugin-dependencies
            ${{ github.workspace }}/.dart_tool/package_config.json
          key: pub-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      # Cache para build outputs
      - name: Cache Flutter build
        uses: actions/cache@v4
        with:
          path: |
            build/
            .dart_tool/
          key: flutter-build-${{ runner.os }}-${{ hashFiles('**/*.dart', 'pubspec.yaml', 'pubspec.lock') }}
          restore-keys: |
            flutter-build-${{ runner.os }}-

      - name: Create firebase_options.dart from secret
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOF'
          ${{ secrets.FIREBASE_OPTIONS_DART }}
          EOF
          
          # Verify file was created and has content
          if [ ! -s lib/firebase_options.dart ]; then
            echo "Error: firebase_options.dart file is empty"
            exit 1
          fi
          
          echo "Firebase options file created successfully"
          echo "File size: $(wc -c < lib/firebase_options.dart) bytes"
          echo "Lines: $(wc -l < lib/firebase_options.dart)"

      - name: Create .env file from secret
        run: |
          cat > .env << 'EOF'
          ${{ secrets.DOT_ENV }}
          EOF
          echo ".env file created successfully"
          echo "File size: $(wc -c < .env) bytes"

      - name: Verify critical files
        run: |
          echo "Checking generated files..."
          ls -la lib/firebase_options.dart .env
          
          # Check if firebase_options.dart has the expected structure
          if grep -q "DefaultFirebaseOptions" lib/firebase_options.dart; then
            echo "‚úì firebase_options.dart contains DefaultFirebaseOptions class"
          else
            echo "‚úó firebase_options.dart does not contain DefaultFirebaseOptions class"
            echo "Content preview (first 10 lines):"
            head -n 10 lib/firebase_options.dart
            exit 1
          fi
          
          # Check for common syntax issues
          if grep -q "import.*firebase_core" lib/firebase_options.dart; then
            echo "‚úì firebase_options.dart contains Firebase Core import"
          else
            echo "‚úó firebase_options.dart missing Firebase Core import"
            exit 1
          fi

      - name: Get dependencies
        run: flutter pub get

      # Determinar la ruta base seg√∫n la rama
      - name: Set base href for branch
        id: base-href
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "base_href=/docai/" >> $GITHUB_OUTPUT
            echo "deploy_path=." >> $GITHUB_OUTPUT
            echo "is_main=true" >> $GITHUB_OUTPUT
          else
            # Sanitizar el nombre de la rama para URL
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "base_href=/docai/preview/$SANITIZED_BRANCH/" >> $GITHUB_OUTPUT
            echo "deploy_path=preview/$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
            echo "is_main=false" >> $GITHUB_OUTPUT
          fi
          echo "Branch: $BRANCH_NAME"
          echo "Sanitized branch: $SANITIZED_BRANCH"

      - name: Build web app
        run: |
          flutter build web --release --base-href "${{ steps.base-href.outputs.base_href }}" --dart-define=FLUTTER_WEB_AUTO_DETECT=true

      # Preparar el directorio de deploy
      - name: Prepare deploy directory
        run: |
          mkdir -p deploy/${{ steps.base-href.outputs.deploy_path }}
          cp -r build/web/* deploy/${{ steps.base-href.outputs.deploy_path }}/
          
          # Crear index.html de navegaci√≥n para la rama main
          if [[ "${{ steps.base-href.outputs.is_main }}" == "true" ]]; then
            mkdir -p deploy/preview
            cat > deploy/preview/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>DocAI - Branch Previews</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
              .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              .branch { margin: 15px 0; padding: 15px; border: 1px solid #ddd; border-radius: 8px; }
              .main-app { background-color: #e7f5e7; border-color: #4caf50; }
              .preview { background-color: #f0f8ff; border-color: #2196f3; }
              a { color: #1976d2; text-decoration: none; font-weight: bold; }
              a:hover { text-decoration: underline; }
              h1 { color: #333; text-align: center; }
              h3 { margin: 0 0 10px 0; color: #555; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üè• DocAI - Previews Disponibles</h1>
              <div class="branch main-app">
                <h3>üöÄ Aplicaci√≥n Principal</h3>
                <p><a href="/docai/">Ver DocAI (Rama Main)</a></p>
                <small>Versi√≥n de producci√≥n estable</small>
              </div>
              <div class="branch preview">
                <h3>üîç Branch Previews</h3>
                <p>Las previews de otras ramas aparecen aqu√≠ autom√°ticamente cuando se hace push:</p>
                <ul>
                  <li><strong>theme-translations</strong>: <a href="/docai/preview/theme-translations/">Ver Preview</a></li>
                  <li><strong>login-fix</strong>: <a href="/docai/preview/login-fix/">Ver Preview</a> (si existe)</li>
                </ul>
                <small>Cada rama tiene su propia URL de preview independiente</small>
              </div>
            </div>
          </body>
          </html>
          EOF
          fi

      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy

  deploy:
    # Ejecuta deploy para push en cualquier rama, no solo main
    if: github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
