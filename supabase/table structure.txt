create table public.chat_conversations (
  id text not null,
  user_id uuid null,
  title text not null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint chat_conversations_pkey primary key (id),
  constraint chat_conversations_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_chat_conversations_user_id on public.chat_conversations using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_chat_conversations_updated_at on public.chat_conversations using btree (updated_at desc) TABLESPACE pg_default;

create trigger update_chat_conversations_updated_at BEFORE
update on chat_conversations for EACH row
execute FUNCTION update_updated_at_column ();


create table public.chat_messages (
  id text not null,
  conversation_id text null,
  role text not null,
  content text not null,
  created_at timestamp with time zone null default now(),
  constraint chat_messages_pkey primary key (id),
  constraint chat_messages_conversation_id_fkey foreign KEY (conversation_id) references chat_conversations (id) on delete CASCADE,
  constraint chat_messages_role_check check (
    (
      role = any (
        array['user'::text, 'assistant'::text, 'system'::text]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_chat_messages_conversation_id on public.chat_messages using btree (conversation_id) TABLESPACE pg_default;

create index IF not exists idx_chat_messages_created_at on public.chat_messages using btree (created_at) TABLESPACE pg_default;

create table public.user_medical_preferences (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  date_of_birth date null,
  gender text null,
  weight numeric(5, 2) null,
  height integer null,
  allergies text[] null default '{}'::text[],
  medication_allergies text[] null default '{}'::text[],
  food_intolerances text[] null default '{}'::text[],
  medicine_preference text not null default 'both'::text,
  avoid_medications text[] null default '{}'::text[],
  preferred_treatments text[] null default '{}'::text[],
  chronic_conditions text[] null default '{}'::text[],
  current_medications text[] null default '{}'::text[],
  previous_surgeries text[] null default '{}'::text[],
  smoking_status text null default 'never'::text,
  alcohol_consumption text null default 'occasional'::text,
  exercise_frequency text null default 'moderate'::text,
  diet_type text null,
  language_preference text null default 'es'::text,
  communication_style text null default 'balanced'::text,
  emergency_contact_name text null,
  emergency_contact_phone text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_medical_preferences_pkey primary key (id),
  constraint user_medical_preferences_user_id_key unique (user_id),
  constraint user_medical_preferences_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint user_medical_preferences_exercise_frequency_check check (
    (
      exercise_frequency = any (
        array[
          'none'::text,
          'light'::text,
          'moderate'::text,
          'intense'::text,
          'daily'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_gender_check check (
    (
      gender = any (
        array[
          'male'::text,
          'female'::text,
          'other'::text,
          'prefer_not_to_say'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_alcohol_consumption_check check (
    (
      alcohol_consumption = any (
        array[
          'never'::text,
          'occasional'::text,
          'moderate'::text,
          'frequent'::text,
          'daily'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_medicine_preference_check check (
    (
      medicine_preference = any (
        array[
          'natural'::text,
          'conventional'::text,
          'both'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_smoking_status_check check (
    (
      smoking_status = any (
        array[
          'never'::text,
          'former'::text,
          'current_light'::text,
          'current_moderate'::text,
          'current_heavy'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_language_preference_check check (
    (
      language_preference = any (
        array[
          'es'::text,
          'en'::text,
          'ca'::text,
          'fr'::text,
          'de'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_communication_style_check check (
    (
      communication_style = any (
        array[
          'direct'::text,
          'detailed'::text,
          'balanced'::text,
          'gentle'::text
        ]
      )
    )
  ),
  constraint user_medical_preferences_diet_type_check check (
    (
      diet_type = any (
        array[
          'omnivore'::text,
          'vegetarian'::text,
          'vegan'::text,
          'pescatarian'::text,
          'keto'::text,
          'mediterranean'::text,
          'other'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_medical_preferences_user_id on public.user_medical_preferences using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_user_medical_preferences_created_at on public.user_medical_preferences using btree (created_at) TABLESPACE pg_default;

create trigger update_user_medical_preferences_updated_at BEFORE
update on user_medical_preferences for EACH row
execute FUNCTION update_updated_at_column ();


create table public.user_preferences (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  allergies text[] null,
  medicine_preference text not null default 'both'::text,
  chronic_conditions text[] null,
  current_medications text[] null,
  age_range text null,
  gender text null,
  additional_notes text null,
  is_first_time boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint user_preferences_pkey primary key (id),
  constraint user_preferences_user_id_key unique (user_id),
  constraint user_preferences_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint user_preferences_age_range_check check (
    (
      age_range = any (
        array[
          '0-17'::text,
          '18-35'::text,
          '36-55'::text,
          '56-75'::text,
          '75+'::text
        ]
      )
    )
  ),
  constraint user_preferences_gender_check check (
    (
      gender = any (
        array[
          'male'::text,
          'female'::text,
          'other'::text,
          'prefer_not_to_say'::text
        ]
      )
    )
  ),
  constraint user_preferences_medicine_preference_check check (
    (
      medicine_preference = any (
        array[
          'natural'::text,
          'conventional'::text,
          'both'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_user_preferences_user_id on public.user_preferences using btree (user_id) TABLESPACE pg_default;


create table public.user_queries_limit (
  user_id uuid not null,
  query_date date not null,
  remaining_queries integer not null default 5,
  constraint user_queries_limit_pkey primary key (user_id, query_date)
) TABLESPACE pg_default;

create index IF not exists idx_user_queries_limit_date on public.user_queries_limit using btree (query_date) TABLESPACE pg_default;