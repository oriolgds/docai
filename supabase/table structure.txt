create table public.user_queries_limit (
  user_id uuid not null,
  query_date date not null,
  remaining_queries integer not null default 5,
  constraint user_queries_limit_pkey primary key (user_id, query_date)
) TABLESPACE pg_default;

create index IF not exists idx_user_queries_limit_date on public.user_queries_limit using btree (query_date) TABLESPACE pg_default;

-- Tabla para preferencias de personalización del usuario
create table public.user_preferences (
  id uuid default gen_random_uuid() primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  allergies text[], -- Array de alergias
  medicine_preference text not null default 'both' check (medicine_preference in ('natural', 'conventional', 'both')),
  chronic_conditions text[], -- Array de condiciones crónicas
  current_medications text[], -- Array de medicamentos actuales
  age_range text check (age_range in ('0-17', '18-35', '36-55', '56-75', '75+')),
  gender text check (gender in ('male', 'female', 'other', 'prefer_not_to_say')),
  additional_notes text,
  is_first_time boolean default true,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  constraint user_preferences_user_id_key unique (user_id)
) TABLESPACE pg_default;

create index IF not exists idx_user_preferences_user_id on public.user_preferences using btree (user_id) TABLESPACE pg_default;

-- RLS policies para user_preferences
alter table public.user_preferences enable row level security;

create policy "Users can view own preferences" on public.user_preferences
  for select using (auth.uid() = user_id);

create policy "Users can insert own preferences" on public.user_preferences
  for insert with check (auth.uid() = user_id);

create policy "Users can update own preferences" on public.user_preferences
  for update using (auth.uid() = user_id);